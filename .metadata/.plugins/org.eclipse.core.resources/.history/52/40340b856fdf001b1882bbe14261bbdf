package com.revature.service.test;

import static org.hamcrest.CoreMatchers.any;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import com.revature.models.BankAccount;
import com.revature.models.CustomerAccount;
import com.revature.models.EmployeeAccount;
import com.revature.repository.BankDao;
import com.revature.repository.BankDaoImpl;

//@RunWith(MockitoJUnitRunner.class)
public class BankDaoTest {
	
	BankDao dao = new BankDaoImpl();
	
	@Mock
	private Connection fakeConnection;
	
	@Mock
	private PreparedStatement fakePrepStatement;
	
	@Mock
	private ResultSet fakeResultSet;
	
	private BankAccount bAccount;
	private BankAccount bAccount2;
	
	@Before
	public void setUp() throws SQLException{
		
		// Mocking 
		fakeConnection = mock(Connection.class);
		fakePrepStatement = mock(PreparedStatement.class);
		fakeResultSet = mock(ResultSet.class);
		
		// 
		assertNotNull(fakeConnection);
		when(fakeConnection.prepareStatement(Mockito.anyString())).thenReturn(fakePrepStatement);
		
		// 
		bAccount = new BankAccount(0, 50, true, 1);
		bAccount2 = new BankAccount(0, 30, true, 1);
		
		//
		when(fakeResultSet.getInt(1)).thenReturn(bAccount.getId());
		when(fakeResultSet.getDouble(2)).thenReturn(bAccount.getBalance());
		when(fakeResultSet.getBoolean(3)).thenReturn(bAccount.isApproved());
		when(fakeResultSet.getInt(4)).thenReturn(bAccount.getId());
		when(fakePrepStatement.executeQuery()).thenReturn(fakeResultSet);
		
		
	}
	
	@Test
	public void testCreateAndSelectBankAccount() {
		BankDao dao = new BankDaoImpl();
		
		int id = dao.insertBankAccount(bAccount);
		
		BankAccount newAccount = dao.selectBankAccountById(id);
		
		assertEquals(bAccount.getBalance(), newAccount.getBalance(), 0.01);
		assertEquals(bAccount.isApproved(), newAccount.isApproved());
		assertEquals(bAccount.getCustomerId(), newAccount.getCustomerId(), 0.01);
	}
	
	@Test
	public void testUpdateAndSelectBankAccount() {
		BankDao dao = new BankDaoImpl();
		BankAccount otherAccount = new BankAccount(10, 100, true, 1);
		
		dao.updateBankAccount(otherAccount);
		
		List<BankAccount> accountList = dao.selectBankAccountsByCustomer(1);
		BankAccount newAccount = accountList.get(accountList.size()-1);
		
		assertEquals(otherAccount.getBalance(), newAccount.getBalance(), 0.01);
		assertEquals(otherAccount.isApproved(), newAccount.isApproved());
		assertEquals(otherAccount.getCustomerId(), newAccount.getCustomerId(), 0.01);
	}
	
	@Test
	public void testDeleteAndSelectBankAccountReturnsNull() {
		BankDao dao = new BankDaoImpl();
		
		int id = dao.insertBankAccount(bAccount);
		
		assertNotNull(dao.selectBankAccountById(id));
		
		bAccount.setId(id);
		dao.deleteBankAccount(bAccount);
		
		assertNull(dao.selectBankAccountById(id));
	}
	
	@Test
	public void testTransfer() {
		BankDao dao = new BankDaoImpl();
		
		double amount = 20;
		double initialBalance = bAccount.getBalance();
		double initialBalance2 = bAccount2.getBalance();
		
		int id1 = dao.insertBankAccount(bAccount);
		int id2 = dao.insertBankAccount(bAccount2);
		
		bAccount.setId(id1);
		bAccount.setId(id2);
		
		dao.transfer(bAccount, bAccount2, amount);
		
		System.out.println(dao.selectBankAccountById(id1).getBalance());
		System.out.println(dao.selectBankAccountById(id2).getBalance());
		
		assertEquals(dao.selectBankAccountById(id1).getBalance(), initialBalance - amount, 0.001);
		assertEquals(dao.selectBankAccountById(id2).getBalance(), initialBalance2 + amount, 0.001);
		
	}

}
