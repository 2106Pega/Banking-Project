package com.revature.service.test;

import static org.hamcrest.CoreMatchers.any;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import com.revature.models.BankAccount;
import com.revature.models.CustomerAccount;
import com.revature.models.EmployeeAccount;
import com.revature.repository.BankDao;
import com.revature.repository.BankDaoImpl;

//@RunWith(MockitoJUnitRunner.class)
public class BankDaoTest {
	
	BankDao dao = new BankDaoImpl();
	
	@Mock
	private DriverManager dm;
	
	@Mock
	private Connection fakeConnection;
	
	@Mock
	private PreparedStatement fakePrepStatement;
	
	@Mock
	private ResultSet fakeResultSet;
	
	private CustomerAccount cAccount;
	private EmployeeAccount eAccount;
	private BankAccount bAccount;
	
	@Before
	public void setUp() throws SQLException{
		
		fakeConnection = mock(Connection.class);
		fakePrepStatement = mock(PreparedStatement.class);
		fakeResultSet = mock(ResultSet.class);
		
		assertNotNull(fakeConnection);
		when(fakeConnection.prepareStatement(Mockito.anyString())).thenReturn(fakePrepStatement);
		
		bAccount = new BankAccount(9, 50, true, 1);
		
		when(fakeResultSet.getInt(1)).thenReturn(bAccount.getId());
		when(fakeResultSet.getDouble(2)).thenReturn(bAccount.getBalance());
		when(fakeResultSet.getBoolean(3)).thenReturn(bAccount.isApproved());
		when(fakeResultSet.getInt(4)).thenReturn(bAccount.getId());
		when(fakePrepStatement.executeQuery()).thenReturn(fakeResultSet);
		System.out.println("This is a method!");
		
		
	}
	
	@Test
	public void createBankAccount() {
		new BankDaoImpl().insertBankAccount(bAccount);
		
		List<BankAccount> newAccount = dao.selectAllBankAccounts();
		
		System.out.println(newAccount);
		
		for (BankAccount b: newAccount) {
			System.out.println(b.getId());
		}
		
//		assertEquals(bAccount.getId(), newAccount.getId());
//		assertEquals(bAccount.getBalance(), newAccount.getBalance(), 0.01);
//		assertEquals(bAccount.isApproved(), newAccount.isApproved());
//		assertEquals(bAccount.getCustomerId(), newAccount.getCustomerId(), 0.01);
	}
	
	@Test
	public void updateBankAccount() {
		BankDao dao = new BankDaoImpl();
		BankAccount otherAccount = new BankAccount(9, 100, true, 1);
		
		dao.updateBankAccount(otherAccount);
		BankAccount newAccount = dao.selectBankAccountById(9);
		
		assertEquals(otherAccount.getId(), newAccount.getId());
		assertEquals(otherAccount.getBalance(), newAccount.getBalance(), 0.01);
		assertEquals(otherAccount.isApproved(), newAccount.isApproved());
		assertEquals(otherAccount.getCustomerId(), newAccount.getCustomerId(), 0.01);
	}
	
	@Test
	public void deleteAccount() {
		BankDao dao = new BankDaoImpl();
		dao.deleteBankAccount(bAccount);
		
		assertNull(dao.selectBankAccountById(9));
	}
	

}
