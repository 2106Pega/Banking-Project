package com.revature.service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.revature.exceptions.NoSuchAccountException;
import com.revature.models.BankAccount;
import com.revature.models.CustomerAccount;
import com.revature.repository.BankDao;
import com.revature.repository.BankDaoImpl;

public class BankAppImpl implements BankApp {
	
	private BankDao dao = new BankDaoImpl();

	/**
	 * Looks for username in database and checks whether the given password is correct
	 * @param	username - the username given to the console by the user
	 * @param	password - the password given to the console by the user
	 * @return	true if password matches password in database, false otherwise
	 * @throws	NoSuchAccountException if account with username cannot be found
	 */
	@Override
	public boolean validateLogin(String username, String password) throws NoSuchAccountException {
		
		CustomerAccount account = dao.selectCustomerAccountByUsername(username);
		
		if (account == null) {
			throw new NoSuchAccountException();
		}
		
		return (password.equals(account.getPassword()));
		
	}

	/**
	 * Creates a new customer account in the database with the given username and password as
	 * 	well as the customer's first and last name
	 * @param	firstName - the user's first name
	 * @param	lastName - the user's last name
	 * @param	username - the user's created username
	 * @param	password - the user's created password
	 */
	@Override
	public void createNewCustomerAccount(String firstName, String lastName, String username, String password) {
		
		CustomerAccount account = new CustomerAccount(0, username, password);
		
		dao.insertCustomerAccount(account);
		
	}
	

	/**
	 * 
	 */
	@Override
	public List<Integer> getBankAccountId(String username) {
		
		CustomerAccount cAccount = dao.selectCustomerAccountByUsername(username);
		int id = cAccount.getId();

		List<Integer> idList = new ArrayList<>();
		
		for (BankAccount b: dao.selectBankAccountsByCustomer(id)) {
			idList.add(b.getId());
		}
		
		return idList;
	}

	/**
	 * Finds the account with the given ID number and returns its balance
	 * @param	id - the ID number of the account to search for
	 * @return	the account balance
	 */
	@Override
	public double getBalance(int id) {
		
		BankAccount account = dao.selectBankAccountById(id);
		
		return account.getBalance();
	}

	/**
	 * Deposits the given amount into the bank account with the given ID number
	 * @param	
	 * @param	
	 */
	@Override
	public void makeDeposit(int id, double amount) {

		BankAccount account = dao.selectBankAccountById(id);
		
		account.setBalance(account.getBalance() + amount);
		
		dao.updateBankAccount(account);
		
	}

	/**
	 * Withdraws the given amount from the bank account with the given ID number
	 * @param	
	 * @param	
	 */
	@Override
	public void makeWithdrawal(int id, double amount) {
		
		BankAccount account = dao.selectBankAccountById(id);
		
		account.setBalance(account.getBalance() - amount);
		
		dao.updateBankAccount(account);
		
	}
	
	

}
