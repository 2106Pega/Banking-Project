package com.revature.service.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;

import com.revature.exceptions.NoSuchAccountException;
import com.revature.models.BankAccount;
import com.revature.models.CustomerAccount;
import com.revature.models.EmployeeAccount;
import com.revature.repository.BankDao;
import com.revature.service.BankApp;
import com.revature.service.BankAppImpl;

public class BankAppTest {
	
	BankApp app;
	
	@Mock
	BankDao fakeDao;
	
	@Mock
	CustomerAccount customer;
	
	@Mock
	EmployeeAccount employee;
	
	@Mock
	BankAccount bank1;
	
	@Mock
	BankAccount bank2;
	
	@Before
	public void setUp() {
		
		fakeDao = mock(BankDao.class);
		customer = mock(CustomerAccount.class);
		employee = mock(EmployeeAccount.class);
		bank1 = mock(BankAccount.class);
		bank2 = mock(BankAccount.class);
		
		when(fakeDao.selectEmployeeAccountByUsername("imanemployee")).thenReturn(employee);
		when(employee.getPassword()).thenReturn("iworkhard247");
		
		when(fakeDao.selectCustomerAccountByUsername("johnsmith")).thenReturn(customer);
		when(customer.getPassword()).thenReturn("imgeneric7");
		when(customer.getId()).thenReturn(1);
		when(fakeDao.selectBankAccountsByCustomer(1)).thenReturn(new ArrayList<BankAccount>(Arrays.asList(bank1, bank2)));
		
		when(fakeDao.updateBankAccount(bank1)).thenReturn(null);
		
		app = new BankAppImpl(fakeDao);
		
	}
	
	@Test
	public void testValidateCustomerLogin() throws NoSuchAccountException {
		
		assertTrue(app.validateCustomerLogin("johnsmith", "imgeneric7"));
		assertFalse(app.validateCustomerLogin("johnsmith", "imgeneric"));
		assertThrows(NoSuchAccountException.class, () -> app.validateCustomerLogin("jonsmith", "imgeneric7"));
		assertThrows(NoSuchAccountException.class, () -> app.validateCustomerLogin("will", "bigbadbi11"));
		
	}
	
	@Test
	public void testValidateEmployeeLogin() throws NoSuchAccountException {
		
		assertTrue(app.validateEmployeeLogin("imanemployee", "iworkhard247"));
		assertFalse(app.validateEmployeeLogin("imanemployee", "imgeneric7"));
		assertThrows(NoSuchAccountException.class, () -> app.validateEmployeeLogin("employee", "iworkhard247"));
		assertThrows(NoSuchAccountException.class, () -> app.validateEmployeeLogin("imanelephant", "1h4v3n01d34!"));
		
	}
	
	@Test
	public void testGetCustomerIdFromUsername() {
		
		assertEquals(app.getCustomerIdFromUsername("johnsmith"), 1);
		assertThrows(NoSuchAccountException.class, () -> app.getCustomerIdFromUsername("idontexist"));
		
	}
	
	
	@Test
	public void testMakeDeposit() {
		
		
		
	}
	
	@Test
	public void makeWithdrawal() {
		
	}
	
	@Test
	public void makeTransfer() {
		
	}
	

}
