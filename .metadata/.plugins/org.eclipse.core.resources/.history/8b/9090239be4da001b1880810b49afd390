package com.revature.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.revature.models.BankAccount;
import com.revature.models.CustomerAccount;
import com.revature.util.ConnectionFactory;

public class BankDaoImpl implements BankDao {

	/**
	 * Inserts a new bank account into the bank database.
	 * @param	account: the account to be added to the database
	 * @return	true if the insertion is successful, false if an error is encountered
	 */
	@Override
	public boolean insertBankAccount(BankAccount account) {
		
		String sql = "INSERT INTO bank (balance, customer_id) values (?, ?);";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setDouble(1, account.getBalance());
			ps.setInt(2, account.getCustomerId());
			
			ps.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
		
	}

	/**
	 * Inserts a new customer account into the bank database.
	 * @param	account: the account to be added to the database
	 * @return	true if the insertion is successful, false if an error is encountered
	 */
	@Override
	public boolean insertCustomerAccount(CustomerAccount account) {
		
		String sql = "INSERT INTO customer_accounts (owner_last_name, owner_first_name, "
				+ "user_name, pass_word) VALUES (?, ?, ?, ?);";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, account.getOwnerLastName());
			ps.setString(2, account.getOwnerFirstName());
			ps.setString(3, account.getUsername());
			ps.setString(4, account.getPassword());
			
			ps.execute();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
	}

	/**
	 * Uses a unique ID number to find the corresponding bank account in the database.
	 * @param	id: the ID of the desired account
	 * @return 	the account with the specified ID number if found, null otherwise
	 */
	@Override
	public BankAccount selectBankAccountById(int id) {
		
		String sql = "SELECT * FROM bank WHERE account_id = ?;";
		BankAccount account = null;
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			account = new BankAccount(rs.getInt("account_id"),
					rs.getDouble("balance"),
					rs.getInt("customer_id"));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return account;
	}

	/**
	 * Finds and returns a list of bank accounts associated with the given customer ID.
	 * @param	id: the unique customer account ID used to locate the accounts
	 * @return	a list of bank accounts associated with the customer ID
	 */
	@Override
	public List<BankAccount> selectBankAccountsByOwner(int id) {
		
		String sql = "SELECT * FROM bank WHERE customer_id = ?;";
		List<BankAccount> accountList = null;
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				accountList.add(new BankAccount(
						rs.getInt("account_id"),
						rs.getDouble("balance"),
						rs.getInt("customer_id")
						));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return accountList;
	}

	/**
	 * Returns a list of all bank accounts in the database.
	 */
	@Override
	public List<BankAccount> selectAllBankAccounts() {
		
		String sql = "SELECT * FROM bank;";
		List<BankAccount> accountList = null;
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				accountList.add(new BankAccount(
						rs.getInt("account_id"),
						rs.getDouble("balance"),
						rs.getInt("customer_id")
						));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	
	/**
	 * Finds the customer account associated with a given (unique) username.
	 * @param 	the username used to find the account
	 * @return	the customer account associated with the given username
	 */
	@Override
	public CustomerAccount selectCustomerAccountByUsername(String username) {
		String sql = "SELECT * FROM customers_accounts WHERE username = ?;";
		CustomerAccount account = null;
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, username);
			
			ResultSet rs = ps.executeQuery();
			account = new CustomerAccount(rs.getInt("customer_id"),
					rs.getString("owner_first_name"),
					rs.getString("owner_last_name"),
					rs.getString("user_name"),
					rs.getString("pass_word"));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return account;
	}

	/**
	 * Update the balance of an existing bank account in the database.
	 * @param	account: the bank account to be updated
	 */
	@Override
	public void updateBankAccount(BankAccount account) {
		
		String sql = "UPDATE bank SET balance = ? where account_id = ?;";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setDouble(1, account.getBalance());
			ps.setInt(2, account.getId());
			
			ps.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Update the balance of an existing bank account in the database.
	 * @param	account: the bank account to be updated
	 */
	@Override
	public void updateCustomerAccount(CustomerAccount account) {
		
		String sql = "UPDATE customer_accounts SET owner_last_name = ?, owner_first_name = ?, "
				+ "user_name = ?, pass_word = ? WHERE customer_id = ?;";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, account.getOwnerLastName());
			ps.setString(2, account.getOwnerFirstName());
			ps.setString(3, account.getUsername());
			ps.setString(4, account.getPassword());
			ps.setInt(5, account.getId());
			
			ps.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	/**
	 * Remove an existing bank account from the database.
	 * @param	account: the bank account to be removed
	 */
	@Override
	public void deleteBankAccount(BankAccount account) {
		
		String sql = "DELETE FROM bank WHERE account_id = ?;";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, account.getId());
			
			ps.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Remove an existing customer account and all associated bank accounts from the database.
	 * @param	account: the customer account to be removed
	 */
	@Override
	public void deleteCustomerAccount(CustomerAccount account) {
		
		String sql = "DELETE FROM bank WHERE customer_id = ?;"
				+ "DELETE FROM customer_accounts WHERE customer_id = ?;";
		
		try (Connection conn = ConnectionFactory.getConnection();) {
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, account.getId());
			ps.setInt(2, account.getId());
			
			ps.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	
	
}
